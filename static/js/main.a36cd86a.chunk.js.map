{"version":3,"sources":["Title.js","AddButton.js","DelButton.js","RenderList.js","MainList.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","id","this","title","React","Component","AddButton","onClick","action","DelButton","butnum","RenderList","state","itlist","thearr","delItem","toke","listItems","splice","setState","map","num","iter","listArr","MainList","addItem","choice","prompt","items","push","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAUeA,E,kDAPd,WAAYC,GAAO,uCACZA,G,qDAGP,OAAQ,wBAAIC,GAAG,SAASC,KAAKF,MAAMG,W,GALhBC,IAAMC,WCeXC,E,kDAdd,WAAYN,GAAO,uCACZA,G,qDAIE,IAAD,OAIR,OACA,4BAAQC,GAAG,QAAOM,QAJF,WAChB,EAAKP,MAAMQ,WAGX,S,GAXuBJ,IAAMC,WCkBfI,E,kDAjBd,WAAYT,GAAO,uCACZA,G,qDAIE,IAAD,OAOR,OACA,4BAAQC,GAAG,SAAQM,QAPJ,WAEhB,EAAKP,MAAMQ,OAAO,EAAKR,MAAMU,UAK5B,S,GAduBN,IAAMC,WCiCfM,E,kDAhCd,WAAYX,GAAO,IAAD,8BACjB,cAAMA,IACDY,MAAM,CACHC,OAAO,EAAKb,MAAMc,QAHT,E,kGAYT,IAAD,OAEDC,EAAQ,SAARA,EAASC,GAId,OAHAC,EAAUC,OAAOF,EAAK,GAEtB,EAAKG,SAAS,CAACN,OAAOI,EAAUG,KAAI,SAACC,EAAIC,GAAL,OAAY,4BAAKA,EAAMD,EAAI,kBAAC,EAAD,CAAWb,OAAQO,EAAQL,OAAQY,UAElG,4BAAKC,IAIAN,EAAUf,KAAKF,MAAMc,OACxBS,EAAQN,EAAUG,KAAI,SAACC,EAAIC,GAAL,OAAY,4BAAKD,EAAI,kBAAC,EAAD,CAAWb,OAAQO,EAAQL,OAAQY,QAElF,OAAQ,6BACR,4BAAKC,Q,GA5BmBnB,IAAMC,WCwBhBmB,E,kDAtBd,WAAYxB,GAAO,IAAD,8BACjB,cAAMA,IAKPyB,QAAQ,WACP,IAAIC,EAAOC,OAAO,uCAClB,EAAKf,MAAMgB,MAAMC,KAAKH,GACtB,EAAKP,SAAS,CAACS,MAAM,EAAKhB,MAAMgB,SAPhC,EAAKhB,MAAM,CACXgB,MAAM,IAHW,E,qDAclB,OACA,yBAAKE,UAAU,YACf,kBAAC,EAAD,CAAYhB,OAAQZ,KAAKU,MAAMgB,QAC/B,kBAAC,EAAD,CAAWpB,OAAQN,KAAKuB,e,GAlBFrB,IAAMC,WCWd0B,MAVf,WAEE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,CAAO3B,MAAM,cAChB,kBAAC,EAAD,QCGiB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a36cd86a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Title extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t}\r\n\trender(){\r\n\treturn (<h1 id=\"Title\">{this.props.title}</h1>);\r\n\t}\r\n\t}\r\nexport default Title;\r\n\r\n\t\r\n","import React from 'react';\r\n\r\nclass AddButton extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t const testo = () =>{\r\n\tthis.props.action();\r\n\t}\r\n\treturn (\r\n\t<button id=\"adder\"onClick={testo}>+</button>\r\n\t);\r\n\t}\r\n\t}\r\nexport default AddButton;","import React from 'react';\r\n\r\nclass DelButton extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t const dele = () =>{\r\n\r\nthis.props.action(this.props.butnum);\r\n\r\n\t}\r\n\t\r\n\treturn (\r\n\t<button id=\"subber\"onClick={dele}>-</button>\r\n\t)\r\n\t}\r\n\t}\r\nexport default DelButton;","import React from 'react';\r\nimport DelButton from './DelButton.js'\r\nclass RenderList extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n          itlist:this.props.thearr,\t\t\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\t\r\n\t\tconst delItem=(toke)=>{\r\n\t\t\tlistItems.splice(toke,1);\r\n\t\t\t/*const listArr=listItems.map((num,iter)=><li>{iter}{num}<DelButton action={delItem}butnum={iter} /></li>);*/\r\n\t\t\tthis.setState({itlist:listItems.map((num,iter)=><li>{iter}{num}<DelButton action={delItem}butnum={iter} /></li>)})\r\n\t\t\treturn(\r\n\t\t\t<ul>{listArr}</ul>\r\n\t\t\t);\r\n\t\t//listArr.splice(this.state.delat,1);\r\n\t\t}\r\n\t\tconst listItems=this.props.thearr;\r\n\tlet listArr=listItems.map((num,iter)=><li>{num}<DelButton action={delItem}butnum={iter} /></li>)\r\n\t\r\n\treturn (<div>\r\n\t<ul>{listArr}</ul>\r\n\t</div>\r\n\t)\r\n\t}\r\n\t}\r\nexport default RenderList;","import React from 'react';\r\nimport AddButton from './AddButton.js'\r\nimport RenderList from './RenderList.js'\r\nclass MainList extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\titems:[]\r\n\t\t};\r\n\t}\r\n\taddItem=()=>{\r\n\t\tlet choice=prompt(\"What would you like to add to list?\");\r\n\t\tthis.state.items.push(choice);\r\n\t\tthis.setState({items:this.state.items})\r\n\t\t/*alert(\"itemadded\");\r\n\t\talert(this.state.items*/\r\n\t}\r\n\trender(){\r\n\treturn (\r\n\t<div className=\"MainList\">\r\n\t<RenderList thearr={this.state.items} />\r\n\t<AddButton action={this.addItem}/>\r\n\t</div>\r\n\t);\r\n\t}\r\n\t}\r\nexport default MainList;","import React from 'react';\r\nimport './App.css';\r\nimport Title from './Title.js'\r\nimport MainList from './MainList.js'\r\nfunction App() {\r\n\t\r\n  return (\r\n    <div className=\"App\">\r\n      <Title title=\"TODO List\"/>\r\n\t  <MainList />\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}